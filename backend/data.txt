// USER SCHEMA
const UserSchema = new Schema({
  username: { type: String, required: true },
  email: { type: String, required: true, unique: true },
  password: String,
  role: { type: String, enum: ['customer', 'shop', 'admin'], required: true },
  avatar: String,
  address: String,
  phone: String,
  reward_point: { type: Number, default: 0 },
  status: { type: Boolean, default: true },
});

// STORE SCHEMA
const StoreSchema = new Schema({
  owner_id: { type: Schema.Types.ObjectId, ref: 'User' },
  name: String,
  address: String,
  contact: String,
  status: { type: Boolean, default: true }
});

// CATEGORY SCHEMA
const CategorySchema = new Schema({
  name: String,
  description: String
});

// PRODUCT SCHEMA
const ProductSchema = new Schema({
  name: { type: String, required: true },
  description: String,
  summary: String,
  price: { type: Number, required: true },
  regularPrice: { type: Number, required: true },
  salePrice: Number,
  sizes: [String],
  colors: [String],
  category_id: { type: Schema.Types.ObjectId, ref: 'Category' },
  store_id: { type: Schema.Types.ObjectId, ref: 'Store' },
  rating: { type: Number, default: 0 },
  images: [String],
  image: String,
  brand: String,
  type: String,
  sku: String,
  stock: { type: Number, default: 0 },
  sales: { type: Number, default: 0 },
  remaining: { type: Number, default: 0 },
  isNew: { type: Boolean, default: false },
  isSale: { type: Boolean, default: false },
  salePercent: { type: Number, default: 0 },
  tags: [String],
  status: { type: Boolean, default: true }
});

// ORDER SCHEMA
const OrderSchema = new Schema({
  user_id: { type: Schema.Types.ObjectId, ref: 'User' },
  status: String,
  total_price: Number,
  payment_method: String,
  created_at: { type: Date, default: Date.now }
});

// ORDER ITEM
const OrderItemSchema = new Schema({
  order_id: { type: Schema.Types.ObjectId, ref: 'Order' },
  product_id: { type: Schema.Types.ObjectId, ref: 'Product' },
  quantity: Number,
  price: Number
});

// CART SCHEMA
const CartSchema = new Schema({
  user_id: { type: Schema.Types.ObjectId, ref: 'User' },
  items: [{
    product_id: { type: Schema.Types.ObjectId, ref: 'Product' },
    quantity: Number
  }]
});

// FAVORITE SCHEMA
const FavoriteSchema = new Schema({
  user_id: { type: Schema.Types.ObjectId, ref: 'User' },
  items: [{
    product_id: { type: Schema.Types.ObjectId, ref: 'Product' },
  }]
});

// FEEDBACK SCHEMA
const FeedbackSchema = new Schema({
  user_id: { type: Schema.Types.ObjectId, ref: 'User' },
  product_id: { type: Schema.Types.ObjectId, ref: 'Product' },
  rating: Number,
  comment: String,
  created_at: { type: Date, default: Date.now }
});

// REWARD POINT
const RewardPointSchema = new Schema({
  user_id: { type: Schema.Types.ObjectId, ref: 'User' },
  points: Number,
  created_at: { type: Date, default: Date.now }
});

// REFUND SCHEMA
const RefundSchema = new Schema({
  user_id: { type: Schema.Types.ObjectId, ref: 'User' },
  order_id: { type: Schema.Types.ObjectId, ref: 'Order' },
  refund_reason: String,
  refund_amount: Number,
  refund_image: String,
  created_at: { type: Date, default: Date.now }
});

// DISCOUNT SCHEMA
const DiscountSchema = new Schema({
  user_id: { type: Schema.Types.ObjectId, ref: 'User' },
  discount_percentage: Number,
  discount_code: String,
  number_of_discount: Number,
  total_use: Number,
  status: Boolean
});

// REPORT SCHEMA
const ReportSchema = new Schema({
  reported_by: { type: Schema.Types.ObjectId, ref: 'User' },
  target_type: String,
  target_id: Schema.Types.ObjectId,
  reason: String,
  status: String,
  created_at: { type: Date, default: Date.now }
});
